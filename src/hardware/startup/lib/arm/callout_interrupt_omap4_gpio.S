/*
 * $QNXLicenseC:
 * Copyright 2013, QNX Software Systems. 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"). You 
 * may not reproduce, modify or distribute this software except in 
 * compliance with the License. You may obtain a copy of the License 
 * at: http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
 *
 * This file may contain contributions from others, either as 
 * contributors under the License or as licensors under other terms.  
 * Please review this entire file for other proprietary rights or license 
 * notices, as well as the QNX Development Suite License Guide at 
 * http://licensing.qnx.com/license-guide/ for other information.
 * $
 */

/*
 * TI OMAP4 specific GPIO interrupt callouts.
 *
 * interrupt_id_* and interrupt_eoi_* are copied and intermixed with other
 * kernel code during initialisation.
 *
 * They do not follow normal calling conventions, and must fall through
 * to the end, rather than attempting to perform a return instruction.
 *
 * The INTR_GENFLAG_* bits in the intrinfo_entry defines which of the
 * following values can be loaded on entry to these code fragments:
 *
 *	r5 - holds the syspageptr				(INTR_GENFLAG_SYSPAGE  set)
 *	r6 - holds the intrinfo_entry pointer	(INTR_GENFLAG_INTRINFO set)
 *	r7 - holds the interrupt mask count		(INTR_GENFLAG_INTRMASK set)
 *
 * The interrupt_id_* routine returns the (controller-relative) level in r4
 */

#include "callout.ah"
#define GPIO_OFF_IRQSTATUS_0     0x02c
#define GPIO_OFF_IRQSTATUS_1     0x030
#define GPIO_OFF_IRQSTATUS_SET_0 0x034
#define GPIO_OFF_IRQSTATUS_SET_1 0x038
#define GPIO_OFF_IRQSTATUS_CLR_0 0x03c
#define GPIO_OFF_IRQSTATUS_CLR_1 0x040

/*
 * -----------------------------------------------------------------------
 * Patch callout code (for GPIO)
 *
 * On entry:
 *	r0 - physical address of syspage
 *	r1 - virtual  address of syspage
 *	r2 - offset from start of syspage to start of the callout routine
 *	r3 - offset from start of syspage to read/write data used by callout
 * -----------------------------------------------------------------------
 */
interrupt_patch_gpio:
	stmdb	sp!, {r4, lr}
	add		r4, r0, r2			// address of callout routine

	/*
	 * Check if we have already mapped this paddr
	 */
	ldr 	r0, [sp, #8]	 	// patch_data
	ldrd 	r0, [r0] 			// r0,r1 = paddr
	adr 	r2, Lpaddr
	ldrd 	r2, [r2] 			// r2,r3 = Lpaddr
	cmp 	r0, r2
	cmpeq 	r1, r3
	ldreq 	r0, Lvaddr 			// get previous mapped vaddr
	beq 	1f
	adr 	r2, Lpaddr
	strd 	r0, [r2]

	/*
	 * Map interrupt controller registers
	 */
	mov		r0, #0x1000			// size of GPIO registers
	adr		r1, Lpaddr
	bl		callout_io_map_indirect
	str		r0, Lvaddr

1:
	/*
	 * Patch the callout routine
	 */
	CALLOUT_PATCH	r4, r0, r1, r2, ip
	ldmia	sp!, {r4, pc}

		.align	3
Lpaddr:	.quad	0xFFFFFFFF		// SDMA interrupt status register base address
Lvaddr:	.word	0xFFFFFFFF

/*
 * -----------------------------------------------------------------------
 * Identify GPIO interrupt source.
 *
 * Returns interrupt number in r4
 * -----------------------------------------------------------------------
 */
CALLOUT_START(interrupt_id_omap4_gpio, 0, interrupt_patch_gpio)
	/*
	 * Get the interrupt controller base address (patched)
	 */
	mov		ip,     #0x000000ff
	orr		ip, ip, #0x0000ff00
	orr		ip, ip, #0x00ff0000
	orr		ip, ip, #0xff000000

	/*
	 * Read Interrupt Mask and Status
	 */
	ldr		r3, [ip, #GPIO_OFF_IRQSTATUS_0]
	ldr		r2, [ip, #GPIO_OFF_IRQSTATUS_SET_0]
	and		r2, r3, r2

	/*
	 * Scan for first set bit
	 */
	clz		r4, r2
	rsbs	r4, r4, #31
	blt		1f

	/*
	 * Clear interrupt status.  Do this before interrupt source is masked
         * to ensure that wakeup events are cleared.
	 */
	mov		r1, #1
	mov		r1, r1, lsl r4
	str		r1, [ip, #GPIO_OFF_IRQSTATUS_0]

	/*
	 * Clear the 2nd interrupt line also to ensure proper state
	 * transitions.
     * TODO: Add errata number, as this is a silicon issue.
     * FIXME: This will clear interrupts to both the MPU and the Tesla.
	 */
	str        r1, [ip, #GPIO_OFF_IRQSTATUS_1]

	/*
	 * Mask the interrupt source
	 */
	str		r1, [ip, #GPIO_OFF_IRQSTATUS_CLR_0]

1:
CALLOUT_END(interrupt_id_omap4_gpio)

/*
 * -----------------------------------------------------------------------
 * Acknowledge specified GPIO interrupt
 *
 * On entry:
 *	r4 contains the interrupt number
 *	r7 contains the interrupt mask count
 * -----------------------------------------------------------------------
 */
CALLOUT_START(interrupt_eoi_omap4_gpio, 0, interrupt_patch_gpio)
	/*
	 * Get the interrupt controller base address (patched)
	 */
	mov		ip,     #0x000000ff
	orr		ip, ip, #0x0000ff00
	orr		ip, ip, #0x00ff0000
	orr		ip, ip, #0xff000000

    /*
     * Only unmask interrupt if mask count is zero
     */
	teq		r7, #0
	bne		0f

	mov		r2, #1
	mov		r2, r2, lsl r4
	str		r2, [ip, #GPIO_OFF_IRQSTATUS_SET_0]		/* Set IRQ enable 1 */

0:
CALLOUT_END(interrupt_eoi_omap4_gpio)

/*
 * -----------------------------------------------------------------------
 * Mask specified GPIO interrupt
 *
 * On entry:
 *	r0 - syspage_ptr
 *	r1 - interrupt number
 *
 * Returns:
 *	r0 - error status
 * -----------------------------------------------------------------------
 */
CALLOUT_START(interrupt_mask_omap4_gpio, 0, interrupt_patch_gpio)
	/*
	 * Get the interrupt controller base address (patched)
	 */
	mov		ip,     #0x000000ff
	orr		ip, ip, #0x0000ff00
	orr		ip, ip, #0x00ff0000
	orr		ip, ip, #0xff000000

    /*
     * Mask the interrupt
     */
	mov		r2, #1
	mov		r2, r2, lsl r1
    str     r2, [ip, #GPIO_OFF_IRQSTATUS_CLR_0]		/* Clear IRQ enable 1 */

    mov     r0, #0
    mov     pc, lr
CALLOUT_END(interrupt_mask_omap4_gpio)

/*
 * -----------------------------------------------------------------------
 * Unmask specified GPIO interrupt
 *
 * On entry:
 *	r0 - syspage_ptr
 *	r1 - interrupt number
 *
 * Returns:
 *	r0 - error status
 * -----------------------------------------------------------------------
 */
CALLOUT_START(interrupt_unmask_omap4_gpio, 0, interrupt_patch_gpio)
	/*
	 * Get the interrupt controller base address (patched)
	 */
	mov		ip,     #0x000000ff
	orr		ip, ip, #0x0000ff00
	orr		ip, ip, #0x00ff0000
	orr		ip, ip, #0xff000000

    /*
     * Unmask the interrupt
     */
	mov		r2, #1
	mov		r2, r2, lsl r1
	str		r2, [ip, #GPIO_OFF_IRQSTATUS_SET_0]		/* Set IRQ enable 1 */

	mov		r0, #0
	mov		pc, lr
CALLOUT_END(interrupt_unmask_omap4_gpio)

#ifdef __QNXNTO__
#ifdef __USESRCVERSION
.section .ident, "SM",%progbits,1;
.asciz "$URL: http://svn.ott.qnx.com/product/branches/7.0.0/trunk/hardware/startup/lib/arm/callout_interrupt_omap4_gpio.S $ $Rev: 781278 $";
.previous
#endif
#endif 
